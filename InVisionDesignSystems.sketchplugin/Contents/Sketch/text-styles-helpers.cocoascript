
//Return all the layer text styles of the current document
function getDocumentTextStyles(document) {
  return document.documentData().layerTextStyles().objects();
};

//get  all the layer text styles of the current document mapped by sharedObjectId
function getDocumentTextStylesById(document) {
  const results = {};
  $.forEach(getDocumentTextStyles(document), function(sketchLayerStyle) {
    results[sketchLayerStyle.style().sharedObjectID()] = sketchLayerStyle;
  });

  return results;
}


/*
 This map will help to derive sharedStyle either based on consistent id or the layer mapping from previously stored map

 Returns an object containing both lookup maps
 */
function libraryImportedTextStyles(document, styleData){
  return {
    stylesByConsistentId: _libraryImportedTextStylesByConsistentID(document, styleData),
    stylesByMapData: _libraryImportedTextStylesByMapData(document)
  }
}

/*
 Return the currently imported sharedStyle by provided id
 Currently it can receive either the consitent id or brandai id and the result will be return trying both options
 */
//todo: receive an object?
function getImportedTextStyle(libraryImportedTextStyles, id){

  if (libraryImportedTextStyles.stylesByConsistentId[id]){
    return libraryImportedTextStyles.stylesByConsistentId[id];
  }

  return libraryImportedTextStyles.stylesByMapData[id];
}

/*
  Add new sharedStyle object to map of the already imported styles
 */
function addNewImportedTextStyle(libraryImportedTextStyles, newSharedStyle){
  libraryImportedTextStyles.stylesByConsistentId[newSharedStyle.objectID()] = newSharedStyle;
}

/*
 This map will help to derive brandai id based on sharedObjectId.

 The keys of the map can be based either on consistent id or on the previously stored map data
 thus encapsulating the mapping for methods who need the data but ingnorant to the source
 */
function brandaiIdByTextStyleIdMap(document, styleData){

  const brandaiIDsByLayerStyleObjectID = _getPreviouslyImportedSharedTextStylesMap(document.documentData());
  var mergedMap = brandaiIDsByLayerStyleObjectID;

  const libraryTextStyles = styleData.globalAssets.typeStyles;

  //library content overrides the map content so it assigned second
  libraryTextStyles.forEach(function(textStyle){
    mergedMap[textStyle.uuid] = textStyle._id;
  });

  return mergedMap;
}

/*
 * Keep a list of already processed text styles from the old map
 *
 * Technically we dont have to use it for the lookup to verify that we have not processed it because if we found that
 * layer by the consistent id we will not even get to this flow so we can decide not to store this map at all
 */
function markTextLayerAsProcessed(command, document, oldID, newID){
  const mapKey = 'processedTextStyles';
  const documentData = document.documentData();
  const mapping = mutableDictionaryForDocumentKey(documentData, mapKey);

  mapping[oldID] = newID;

  [command setValue:mapping forKey:mapKey onDocument:documentData];
}


function allLibraryTextStylesByUUID(styleData) {
  const libraryTextStylesByID = {};
  styleData.globalAssets.typeStyles.forEach(function(sharedStyle){
    libraryTextStylesByID[sharedStyle.uuid] = sharedStyle;
  });

  return libraryTextStylesByID;
}

function _libraryImportedTextStylesByConsistentID(document, styleData){
  const currentlySyncedTextStyles = {};
  const libraryTextStylesByUUID = allLibraryTextStylesByUUID(styleData);

  const documentTextStyles = getDocumentTextStyles(document);

  $.forEach(documentTextStyles, function(sketchTextStyle) {
    if (libraryTextStylesByUUID[sketchTextStyle.objectID()]){
      currentlySyncedTextStyles[sketchTextStyle.objectID()] = sketchTextStyle;
    }
  });

  return currentlySyncedTextStyles;
}


// Returns an object that maps each shared text style in the document in the
// following way:
// Brand.ai Type Style ID -> Shared Text Style
function _libraryImportedTextStylesByMapData(document) {
  // Relationship is stored as Sketch Shared ID -> Brand.ai Type Style ID
  // because there can be only one linked Brand.ai Type Style for each shared
  // style but there can be multiple shared styles across different Sketch
  // documents all linked to the same Brand.ai style. This reverses it to
  // Brand.ai Type Style ID -> Sketch Shared ID (for the document) so we can do
  // lookups based on the Brand.ai ID.
  const results = {};

  const brandAIIDsByTextStyleID =
    _getPreviouslyImportedSharedTextStylesMap(document.documentData());

  const sharedTextStyles = getDocumentTextStyles(document);

  $.forEach(sharedTextStyles, function(sketchTextStyle) {
    var brandAIID = brandAIIDsByTextStyleID[sketchTextStyle.objectID()];
    if (brandAIID) {
      results[brandAIID] = sketchTextStyle;
    }
  });

  return results;
}

// Returns a dictionary mapping like this:
// Sketch Shared Text Style ID -> Brand.ai Type Style ID
function _getPreviouslyImportedSharedTextStylesMap(documentData) {
  return mutableDictionaryForDocumentKey(documentData, 'importedTypeStyles')
}