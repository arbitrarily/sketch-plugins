@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var document = context.document;
    var documentData = document.documentData();

    if (MSApplicationMetadata.metadata().appVersion < 47) {
        document.showMessage("ðŸ˜® You have to update Sketch 47+ to use thie feature.");
        return;
    }

    var selection = context.selection;
    var assetLibraryController = AppController.sharedInstance().librariesController();
    var availableLibraries = assetLibraryController.availableLibraries();

    if (availableLibraries.count() == 0) {
        document.showMessage("You have not any available library.");
        return;
    }

    // All symbol master will changed
    var symbolMastersWillChanged = NSMutableArray.alloc().init();
    if (selection.count() > 0) {
        var loopSelection = selection.objectEnumerator();
        var layer;
        while (layer = loopSelection.nextObject()) {

            var loopChild = layer.children().objectEnumerator();
            var child;
            while (child = loopChild.nextObject()) {
                if (child.class() == "MSSymbolInstance") {
                    if (!child.symbolMaster().isForeign()) {
                        if (!symbolMastersWillChanged.containsObject(child.symbolMaster())) {
                            symbolMastersWillChanged.addObject(child.symbolMaster());
                        }
                    }
                }
                if (child.class() == "MSSymbolMaster") {
                    if (!symbolMastersWillChanged.containsObject(child)) {
                        symbolMastersWillChanged.addObject(child);
                    }
                }
            }

        }
    } else {
        symbolMastersWillChanged.addObjectsFromArray(documentData.localSymbols());
    }

    if (symbolMastersWillChanged.count() == 0) {
        if (selection.count() > 0) {
            document.showMessage("You have not select any symbol.");
        } else {
            document.showMessage("Current document have not any symbol.");
        }
        return;
    }

    // Choose a library file
    var selectedLibrary;
    var dialog = COSAlertWindow.alloc().init();
    if (symbolMastersWillChanged.count() < documentData.localSymbols().count()) {
        dialog.setMessageText("Change Selected Symbols to Library Symbol");
    } else {
        dialog.setMessageText("Change All Symbols to Library Symbol");
    }
    dialog.setInformativeText("This will change local symbol to library symbol base symbol ID.");

    dialog.addTextLabelWithValue("Choose a library.");
    var selectBox = NSPopUpButton.alloc().initWithFrame(NSMakeRect(0, 0, 300, 28));
    var loopAvailableLibraries = availableLibraries.reverseObjectEnumerator();
    var availableLibrary;
    while (availableLibrary = loopAvailableLibraries.nextObject()) {
        selectBox.addItemWithTitle("");
        selectBox.lastItem().setTitle(availableLibrary.name());
    }
    dialog.addAccessoryView(selectBox);

    dialog.addButtonWithTitle("OK");
    dialog.addButtonWithTitle("Cancel");

    var responseCode = dialog.runModal();
    if (responseCode == 1000) {
        var i = availableLibraries.count() - selectBox.indexOfSelectedItem() - 1;
        selectedLibrary = availableLibraries.objectAtIndex(i);
    } else {
        return;
    }

    // Import symbol from library
    var countSymbol = 0;
    var countInstance = 0;
    var symbolIDMap = NSMutableDictionary.alloc().init();
    var loopSymbolMastersWillChanged = symbolMastersWillChanged.objectEnumerator();
    var symbolMaster;
    while (symbolMaster = loopSymbolMastersWillChanged.nextObject()) {
        var remoteSymbol = selectedLibrary.symbolWithID(symbolMaster.symbolID());
        if (remoteSymbol) {

            // Import symbol
            var importedSymbol = assetLibraryController.importForeignSymbol_fromLibrary_intoDocument(
                remoteSymbol, selectedLibrary, documentData
            );

            // Replace all instances of symbolMaster
            var instancesWillReplaced = symbolMaster.allInstances();
            var loopInstancesWillReplaced = instancesWillReplaced.objectEnumerator();
            var instanceWillReplaced;
            while (instanceWillReplaced = loopInstancesWillReplaced.nextObject()) {
                instanceWillReplaced.changeInstanceToSymbol(importedSymbol.symbolMaster());
                instanceWillReplaced.setName(instanceWillReplaced.symbolMaster().name());
                instanceWillReplaced.resetSizeToMaster();
                countInstance ++;
            }

            // Delete symbolMaster
            symbolMaster.removeFromParent();
            countSymbol ++;

            // Symbol ID map
            symbolIDMap.setObject_forKey(importedSymbol.symbolMaster().symbolID(), symbolMaster.symbolID());

        }
    }

    // Change overrides mapping
    if (countInstance > 0) {
        var instancesInCurrentDocument = instancesInDocument(document);
        var loopInstancesInCurrentDocument = instancesInCurrentDocument.objectEnumerator();
        var instance;
        while (instance = loopInstancesInCurrentDocument.nextObject()) {
            instance.updateOverridesWithObjectIDMap(symbolIDMap);
        }
        document.reloadInspector();
    }

    var message;
    if (countSymbol > 1) {
        message = countSymbol + " symbol masters have been changed to library symbol.";
    } else if (countSymbol == 1) {
        message = "1 symbol master have been changed to library symbol.";
    } else {
        message = "No any symbol master have been changed to library symbol.";
    }
    document.showMessage(message);

    ga(context, "Library");

};

function instancesInDocument(document) {
    var allInstances = NSMutableArray.alloc().init();
    var predicate = NSPredicate.predicateWithFormat("className == %@", "MSSymbolInstance");
    var loopPages = document.pages().objectEnumerator();
    var page;
    while (page = loopPages.nextObject()) {
        var instancesInPage = page.children().filteredArrayUsingPredicate(predicate);
        allInstances.addObjectsFromArray(instancesInPage);
    }
    return allInstances;
}
