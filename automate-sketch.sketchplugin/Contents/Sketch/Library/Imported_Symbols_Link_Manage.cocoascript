@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var document = context.document;
    if (MSApplicationMetadata.metadata().appVersion < 47) {
        document.showMessage("ðŸ˜® You have to update Sketch 47+ to use thie feature.");
        return;
    }

    var documentData = document.documentData();
    var allImportedSymbols = documentData.foreignSymbols();
    if (allImportedSymbols.count() == 0) {
        document.showMessage("You have not any imported symbol.");
        return;
    }

    var assetLibraryController = AppController.sharedInstance().librariesController();
    var availableLibraries = assetLibraryController.availableLibraries();
    if (availableLibraries.count() == 0) {
        document.showMessage("You have not any available library.");
        return;
    }

    // Dialog
    var dialog = NSAlert.alloc().init();
    dialog.setMessageText("Imported Symbols Link Manage");
    dialog.setInformativeText("Link imported symbols to another library, or fix the library not found error.");
    dialog.addButtonWithTitle("Close");

    var accessoryView = NSView.alloc().init();
    accessoryView.setFlipped(true);
    accessoryView.setFrame(NSMakeRect(0, 0, 500, 400));

    var scrollView = NSScrollView.alloc().initWithFrame(NSMakeRect(0, 0, 500, 400));
    scrollView.setHasVerticalScroller(true);
    scrollView.setBorderType(NSBezelBorder);
    accessoryView.addSubview(scrollView);

    var contentView = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 500, allImportedSymbols.count() * 60 + 10));
    contentView.setFlipped(true);

    var loopImportedSymbols = allImportedSymbols.objectEnumerator();
    var importedSymbol;
    var i = 0;
    while (importedSymbol = loopImportedSymbols.nextObject()) {

        if (MSApplicationMetadata.metadata().appVersion >= 49) {
            var libraryForSymbol = assetLibraryController.libraryForShareableObject(importedSymbol.symbolMaster());
        } else {
            var libraryForSymbol = assetLibraryController.libraryForSymbol(importedSymbol.symbolMaster());
        }
        var sourceLibraryName = importedSymbol.sourceLibraryName();

        // List
        var itemView = NSView.alloc().initWithFrame(NSMakeRect(0, 60 * i, 500, 60));
        itemView.setFlipped(true);

        // 0: Index allImportedSymbols
        var indexView = NSTextField.alloc().initWithFrame(NSMakeRect(0, 0, 0, 0));
        indexView.setStringValue(i);
        itemView.addSubview(indexView);

        // Tips
        var tipView = NSTextField.alloc().initWithFrame(NSMakeRect(370, 42, 120, 30));
        tipView.setStringValue("");
        tipView.setFont(NSFont.systemFontOfSize(10));
        tipView.setTextColor(NSColor.redColor());
        tipView.setBezeled(false);
        tipView.setEditable(false);
        itemView.addSubview(tipView);

        // Preview image
        var imageView = NSImageView.alloc().initWithFrame(NSMakeRect(10, 10, 40, 40));
        var layerAncestry = MSImmutableLayerAncestry.alloc().initWithMSLayer(importedSymbol.symbolMaster());
        var symbolPreviewImage = MSSymbolPreviewGenerator.imageForSymbolAncestry_withSize_colorSpace_trimmed(
            layerAncestry, CGSizeMake(80, 80), NSColorSpace.sRGBColorSpace(), true
        );
        imageView.setImage(symbolPreviewImage);
        itemView.addSubview(imageView);

        // Title
        var titleView = NSTextField.alloc().initWithFrame(NSMakeRect(60, 10, 300, 20));
        titleView.setStringValue(importedSymbol.symbolMaster().name());
        titleView.setBezeled(false);
        titleView.setEditable(false);
        itemView.addSubview(titleView);

        // Library name
        var libraryNameView = NSTextField.alloc().initWithFrame(NSMakeRect(60, 30, 300, 20));
        libraryNameView.setStringValue(libraryForSymbol ? libraryForSymbol.name() : sourceLibraryName);
        libraryNameView.setBezeled(false);
        libraryNameView.setEditable(false);
        libraryNameView.setTextColor(NSColor.grayColor());
        itemView.addSubview(libraryNameView);

        if (!libraryForSymbol) {
            tipView.setStringValue("Library not found.");
        } else {
            if (libraryForSymbol.enabled() == false) {
                tipView.setStringValue("Library is disabled.");
            }
        }

        // Library list
        var libraryListView = NSPopUpButton.alloc().initWithFrame(NSMakeRect(370, 15, 120, 30));
        if (!libraryForSymbol) {
            libraryListView.addItemWithTitle("");
            libraryListView.lastItem().setTitle(sourceLibraryName);
        } else {
            if (libraryForSymbol.enabled() == false) {
                libraryListView.addItemWithTitle("");
                libraryListView.lastItem().setTitle(libraryForSymbol.name());
            }
        }
        var loopAvailableLibraries = availableLibraries.objectEnumerator();
        var availableLibrary;
        while (availableLibrary = loopAvailableLibraries.nextObject()) {
            libraryListView.addItemWithTitle("");
            libraryListView.lastItem().setTitle(availableLibrary.name());
        }
        itemView.addSubview(libraryListView);

        if (libraryForSymbol) {
            if (libraryForSymbol.enabled()) {
                libraryListView.selectItemAtIndex(availableLibraries.indexOfObject(libraryForSymbol));
            }
        }

        // Change the libraryID of MSForeignSymbol
        libraryListView.setCOSJSTargetFunction(function(sender) {

            var tipView = sender.superview().subviews().objectAtIndex(1);
            var importedSymbolIndex = parseInt(sender.superview().subviews().objectAtIndex(0).stringValue());
            var importedSymbol = allImportedSymbols.objectAtIndex(importedSymbolIndex);
            if (MSApplicationMetadata.metadata().appVersion >= 49) {
                var originalLibrary = assetLibraryController.libraryForShareableObject(importedSymbol.symbolMaster());
            } else {
                var originalLibrary = assetLibraryController.libraryForSymbol(importedSymbol.symbolMaster());
            }
            var originalLibraryID = importedSymbol.libraryID();
            var originalLibraryName = importedSymbol.sourceLibraryName();

            var selectedLibraryIndex = sender.indexOfSelectedItem();
            if (sender.numberOfItems() == availableLibraries.count()) {
                var finalLibrary = availableLibraries.objectAtIndex(selectedLibraryIndex);
            } else {
                if (selectedLibraryIndex == 0) {
                    var finalLibrary = nil;
                } else {
                    var finalLibrary = availableLibraries.objectAtIndex(selectedLibraryIndex - 1);
                }
            }

            if (finalLibrary) {
                var finalLibraryID = finalLibrary.libraryID();
                var finalLibraryName = finalLibrary.name();
                if (importedSymbol.masterFromLibrary(finalLibrary)) {
                    tipView.setStringValue("");
                } else {
                    tipView.setStringValue("Symbol not found.");
                }

            } else {
                var finalLibraryID = originalLibraryID;
                var finalLibraryName = originalLibraryName;
                if (!originalLibrary) {
                    tipView.setStringValue("Library not found.");
                } else {
                    if (originalLibrary.enabled() == false) {
                        tipView.setStringValue("Library is disabled.");
                    }
                }
            }

            importedSymbol.setLibraryID(finalLibraryID);
            importedSymbol.setSourceLibraryName(finalLibraryName);

        });

        // Divider
        var divider = NSView.alloc().initWithFrame(NSMakeRect(0, 60 - 1, 500, 1));
        divider.setWantsLayer(true);
        divider.layer().setBackgroundColor(CGColorCreateGenericRGB(0, 0, 0, 0.1));
        itemView.addSubview(divider);

        contentView.addSubview(itemView);

        i ++;

    }

    scrollView.setDocumentView(contentView);

    dialog.setAccessoryView(accessoryView);
    dialog.runModal();

    ga(context, "Library");

};
