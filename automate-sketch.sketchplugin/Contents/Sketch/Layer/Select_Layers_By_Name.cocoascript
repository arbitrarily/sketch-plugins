@import "../Libraries/Preferences.cocoascript";
@import "../Libraries/Google_Analytics.cocoascript";

var onRun = function(context) {

    var doc = context.document;
    var page = doc.currentPage();
    var selection = context.selection;

    var layerTypes = [
        "All",
        "Artboard or Symbol Master",
        "Symbol Instance",
        "Bitmap Layer",
        "Text Layer",
        "Shape Layer",
        "Slice",
        "Layer Group"
    ];

    var defaultUserInputString = getPreferences(context, "selectLayersByName") || "";
    var selectLayersByNameRegExp = getPreferences(context, "selectLayersByNameRegExp") == 1 ? NSOnState : NSOffState;
    var selectLayersType = getPreferences(context, "selectLayersType") || 0;

    // Dialog
    var dialog = COSAlertWindow.alloc().init();
    dialog.setMessageText("Select Layer by Name.");
    dialog.setInformativeText("Tips: String like \"123\" or Regex like \"\\d+\".")

    var view = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 24));
    view.setFlipped(true);
    var textField = NSTextField.alloc().initWithFrame(NSMakeRect(0, 0, 200, 24));
    textField.setStringValue(defaultUserInputString);
    view.addSubview(textField);

    var checkboxRegExp = NSButton.alloc().initWithFrame(NSMakeRect(210, 0, 90, 24));
    checkboxRegExp.setButtonType(NSSwitchButton);
    checkboxRegExp.setTitle("Use Regex");
    checkboxRegExp.setState(selectLayersByNameRegExp);
    view.addSubview(checkboxRegExp);

    dialog.addAccessoryView(view);

    var view2 = NSView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 24));
    view2.setFlipped(true);
    var titleView = NSTextField.alloc().initWithFrame(NSMakeRect(0, 0, 110, 24));
    titleView.setStringValue("Filter Layer Type:");
    titleView.setFont(NSFont.systemFontOfSize(12));
    titleView.setTextColor(NSColor.blackColor());
    titleView.setBezeled(false);
    titleView.setDrawsBackground(false);
    titleView.setEditable(false);
    titleView.setSelectable(false);
    view2.addSubview(titleView);

    var selectBox = NSPopUpButton.alloc().initWithFrame(NSMakeRect(110, 0, 120, 24));
    selectBox.addItemsWithTitles(layerTypes);
    selectBox.selectItemAtIndex(selectLayersType);
    view2.addSubview(selectBox);

    dialog.addAccessoryView(view2);

    dialog.addButtonWithTitle("OK");
    dialog.addButtonWithTitle("Cancel");

    dialog.alert().window().setInitialFirstResponder(textField);

    var responseCode = dialog.runModal();
    if (responseCode == 1000) {

        if (checkboxRegExp.state() == 1) {
            setPreferences(context, "selectLayersByNameRegExp", true);
        } else {
            setPreferences(context, "selectLayersByNameRegExp", false);
        }

        var filterType = selectBox.indexOfSelectedItem();
        setPreferences(context, "selectLayersType", filterType);

        var userInputString = textField.stringValue();
        if (userInputString != "") {

            if (checkboxRegExp.state() == 1) {
                selectLayerByNameWithSelection(context, page, selection, userInputString, true, filterType);
            } else {
                selectLayerByNameWithSelection(context, page, selection, userInputString, false, filterType);
            }

            setPreferences(context, "selectLayersByName", userInputString);

        } else {
            doc.showMessage("Input layer name.");
        }
    }

    ga(context, "Layer");

};

function selectLayerByNameWithSelection(context, page, selection, userInputString, regexp, filterType) {

    var doc = context.document;
    var totalCount = 0;

    if (selection.count() == 0) {
        selectLayerByName(page, userInputString, regexp, filterType, function(count){
            totalCount = count;
        });
    } else {
        var loopSelection = selection.objectEnumerator();
        var layer;
        while (layer = loopSelection.nextObject()) {
            selectLayerByName(layer, userInputString, regexp, filterType, function(count) {
                totalCount += count;
            });
        }
    }

    if (totalCount == 0) {
        doc.showMessage("No layer found.");
    } else if (totalCount == 1) {
        doc.showMessage("Select 1 layer.");
    } else {
        doc.showMessage("Select " + totalCount + " layers.");
    }
}

function selectLayerByName(parent, name, regexp, filterType, callback) {

    var count = 0;

    // Fix Sketch 45
    var page = parent.parentPage();
    if (page.deselectAllLayers) {
        page.deselectAllLayers();
    } else {
        page.changeSelectionBySelectingLayers(nil);
    }

    var loop = parent.children().objectEnumerator();
    var child;
    while (child = loop.nextObject()) {

        var nameMatch = false,
            typeMatch = false;

        if (regexp) {
            if (RegExp(name).test(child.name())) {
                nameMatch = true;
            }
        } else {
            if (child.name().isEqualToString(name)) {
                nameMatch = true;
            }
        }

        if (nameMatch) {
            if (
                (filterType == 0) ||
                (filterType == 1 && child.class() == "MSArtboardGroup") ||
                (filterType == 1 && child.class() == "MSSymbolMaster") ||
                (filterType == 2 && child.class() == "MSSymbolInstance") ||
                (filterType == 3 && child.class() == "MSBitmapLayer") ||
                (filterType == 4 && child.class() == "MSTextLayer") ||
                (filterType == 5 && child.class() == "MSShapeGroup") ||
                (filterType == 6 && child.class() == "MSSliceLayer") ||
                (filterType == 7 && child.class() == "MSLayerGroup")
            ) {
                typeMatch = true;
            }

            if (typeMatch) {
                // Fix Sketch 45
                if (MSApplicationMetadata.metadata().appVersion < 45) {
                    child.select_byExpandingSelection(true, true);
                } else {
                    child.select_byExtendingSelection(true, true);
                }
                count ++;
            }
        }
    }

    if (callback && typeof(callback) == "function") {
        callback(count);
    }
}
